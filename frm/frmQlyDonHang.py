import tkinter as tk
from datetime import datetime
from tkinter import ttk, messagebox
from tkinter.filedialog import asksaveasfilename
from fpdf import FPDF

from controllers.donhang_controller import DonHangController
from controllers.product_controller import ProductController
from controllers.khachhang_controller import KhachHangController

class FrmQlyDonHang(tk.Frame):
    def __init__(self, parent):
        super().__init__(parent, bg="#2c3e50")
        self.donhang_controller = DonHangController()
        self.product_controller = ProductController()
        self.khachhang_controller = KhachHangController()
        self.danh_sach_sanpham = []  # L∆∞u t·∫°m s·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn
        self.configure_style()
        self.create_widgets()
        self.load_data()
        # G·∫Øn s·ª± ki·ªán click v√†o Treeview
        self.tree.bind("<Double-1>", self.show_detail_donhang)

    def show_detail_donhang(self, event):
        selected_item = self.tree.selection()
        if not selected_item:
            return

        # L·∫•y m√£ ƒë∆°n h√†ng t·ª´ h√†ng ƒë∆∞·ª£c ch·ªçn
        ma_donhang = self.tree.item(selected_item)['values'][0]

        # L·∫•y th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng
        donhang_info = self.donhang_controller.get_donhang_by_id(ma_donhang)
        chitiet_donhang = self.donhang_controller.get_chitiet_donhang(ma_donhang)

        # T·∫°o pop-up hi·ªÉn th·ªã th√¥ng tin
        self.create_detail_popup(donhang_info, chitiet_donhang)

    def create_detail_popup(self, donhang_info, chitiet_donhang):
        # Gi·∫£ s·ª≠ donhang_info = (ma_dh, ma_kh, ten_kh, ngay_dat, tong_tien)
        popup = tk.Toplevel()
        popup.title(f"Chi ti·∫øt ƒë∆°n h√†ng #{donhang_info[0]}")
        popup.geometry("800x500")

        # Chuy·ªÉn ƒë·ªïi ng√†y ƒë·∫∑t n·∫øu c·∫ßn (gi·∫£ s·ª≠ donhang_info[3] l√† timestamp Unix)
        ngay_dat = donhang_info[3]
        if isinstance(ngay_dat, int):
            ngay_dat = datetime.fromtimestamp(ngay_dat)

        # Th√¥ng tin c∆° b·∫£n
        info_frame = tk.Frame(popup)
        info_frame.pack(pady=10, padx=10, fill="x")
        tk.Label(info_frame, text=f"M√£ ƒë∆°n h√†ng: {donhang_info[0]}", font=("Arial", 12)).grid(row=0, column=0, sticky="w")
        tk.Label(info_frame, text=f"M√£ kh√°ch h√†ng: {donhang_info[1]}", font=("Arial", 12)).grid(row=1, column=0, sticky="w")
        tk.Label(info_frame, text=f"T√™n kh√°ch h√†ng: {donhang_info[2]}", font=("Arial", 12)).grid(row=2, column=0, sticky="w")
        tk.Label(info_frame, text=f"Ng√†y ƒë·∫∑t: {ngay_dat.strftime('%d/%m/%Y')}", font=("Arial", 12)).grid(row=3, column=0, sticky="w")
        tk.Label(info_frame, text=f"T·ªïng ti·ªÅn: {donhang_info[4]:,.0f} VNƒê", font=("Arial", 12, "bold")).grid(row=4, column=0, sticky="w")

        # B·∫£ng chi ti·∫øt s·∫£n ph·∫©m
        tree_frame = tk.Frame(popup)
        tree_frame.pack(fill="both", expand=True, padx=10)

        columns = ("M√£ SP", "T√™n SP", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn")
        tree = ttk.Treeview(tree_frame, columns=columns, show="headings")
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100 if col == "M√£ SP" else 150)
        for item in chitiet_donhang:
            # Gi·∫£ s·ª≠ m·ªói chi ti·∫øt ƒë∆°n h√†ng l√† tuple: (ma_sp, ten_sp, so_luong, gia)
            ma_sp, ten_sp, so_luong, gia = item
            thanh_tien = so_luong * gia
            tree.insert("", "end", values=(ma_sp, ten_sp, so_luong, f"{gia:,.0f}", f"{thanh_tien:,.0f}"))
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=vsb.set)
        tree.pack(side="left", fill="both", expand=True)
        vsb.pack(side="right", fill="y")

        # N√∫t xu·∫•t PDF
        btn_export = ttk.Button(popup, text="üìÑ Xu·∫•t PDF", command=lambda: self.export_to_pdf(donhang_info, chitiet_donhang))
        btn_export.pack(pady=10)

    def export_to_pdf(self, donhang_info, chitiet_donhang):
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', r'D:\DH\K2_N3\LTUDPY\File project\BTL\frm\dejavu-fonts-ttf-2.37\dejavu-fonts-ttf-2.37\ttf\DejaVuSans.ttf', uni=True)
        pdf.set_font("DejaVu", size=12)
        pdf.cell(200, 10, txt=f"H√ìA ƒê∆†N #{donhang_info[0]}", ln=1, align="C")
        pdf.cell(200, 10, txt=f"Ng√†y ƒë·∫∑t: {donhang_info[3].strftime('%d/%m/%Y')}", ln=1)
        pdf.cell(200, 10, txt=f"T·ªïng ti·ªÅn: {donhang_info[4]:,.0f} VNƒê", ln=1)
        pdf.cell(40, 10, "M√£ SP", border=1)
        pdf.cell(60, 10, "T√™n SP", border=1)
        pdf.cell(30, 10, "S·ªë l∆∞·ª£ng", border=1)
        pdf.cell(40, 10, "ƒê∆°n gi√°", border=1)
        pdf.cell(40, 10, "Th√†nh ti·ªÅn", border=1)
        pdf.ln()
        for item in chitiet_donhang:
            ma_sp, ten_sp, so_luong, gia = item
            thanh_tien = so_luong * gia
            pdf.cell(40, 10, str(ma_sp), border=1)
            pdf.cell(60, 10, ten_sp.encode('utf-8').decode('utf-8'), border=1)
            pdf.cell(30, 10, str(so_luong), border=1)
            pdf.cell(40, 10, f"{gia:,.0f}", border=1)
            pdf.cell(40, 10, f"{thanh_tien:,.0f}", border=1)
            pdf.ln()
        file_path = asksaveasfilename(
            title="Ch·ªçn n∆°i l∆∞u file PDF",
            initialfile=f"donhang_{donhang_info[0]}.pdf",
            defaultextension=".pdf",
            filetypes=[("PDF Files", "*.pdf")]
        )
        if file_path:
            pdf.output(file_path, "F")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t PDF th√†nh c√¥ng: {file_path}")

    def configure_style(self):
        self.style = ttk.Style()
        self.style.theme_use("clam")
        self.style.configure("Treeview", background="#34495e", foreground="white",
                             fieldbackground="#34495e", rowheight=25, bordercolor="#16a085")
        self.style.configure("Treeview.Heading", background="#16a085", foreground="white",
                             font=("Arial", 12, "bold"))
        self.style.map("TButton", background=[("active", "#3498db"), ("!disabled", "#2980b9")],
                       foreground=[("!disabled", "white")])

    def create_widgets(self):
        main_frame = tk.Frame(self, bg="#2c3e50")
        main_frame.pack(expand=True, fill="both", padx=10, pady=10)

        # === Thanh t√¨m ki·∫øm ===
        search_frame = tk.Frame(main_frame, bg="#2c3e50")
        search_frame.pack(fill="x", pady=5)
        self.search_var = tk.StringVar()
        self.entry_search = ttk.Entry(search_frame, textvariable=self.search_var, width=40, style="Search.TEntry")
        self.entry_search.pack(side="left", padx=5)
        self.entry_search.insert(0, "Nh·∫≠p m√£ ƒë∆°n, m√£ KH, t√™n KH, ng√†y ƒë·∫∑t ho·∫∑c t·ªïng ti·ªÅn...")
        self.entry_search.bind("<FocusIn>", lambda e: self.entry_search.delete(0, "end"))
        btn_search = ttk.Button(search_frame, text="üîç T√¨m ki·∫øm", command=self.search_donhang)
        btn_search.pack(side="left", padx=5)
        btn_clear = ttk.Button(search_frame, text="‚ùå X√≥a t√¨m", command=self.clear_search)
        btn_clear.pack(side="left", padx=5)

        # === B·∫£ng ƒë∆°n h√†ng v·ªõi c·ªôt: M√£ ƒêH, M√£ KH, T√™n KH, Ng√†y ƒë·∫∑t, T·ªïng ti·ªÅn ===
        self.tree = ttk.Treeview(main_frame,
                                 columns=("M√£ ƒêH", "M√£ KH", "T√™n KH", "Ng√†y ƒë·∫∑t", "T·ªïng ti·ªÅn"),
                                 show="headings",
                                 style="Custom.Treeview")
        self.tree.heading("M√£ ƒêH", text="M√£ ƒêH", anchor="center")
        self.tree.heading("M√£ KH", text="M√£ KH", anchor="center")
        self.tree.heading("T√™n KH", text="T√™n KH", anchor="center")
        self.tree.heading("Ng√†y ƒë·∫∑t", text="Ng√†y ƒë·∫∑t")
        self.tree.heading("T·ªïng ti·ªÅn", text="T·ªïng ti·ªÅn (VNƒê)", anchor="e")
        self.tree.column("M√£ ƒêH", width=100)
        self.tree.column("M√£ KH", width=100)
        self.tree.column("T√™n KH", width=150)
        self.tree.column("Ng√†y ƒë·∫∑t", width=150)
        self.tree.column("T·ªïng ti·ªÅn", width=150)
        self.tree.pack(fill="both", expand=True, pady=10)

        # N√∫t ch·ª©c nƒÉng
        btn_frame = tk.Frame(main_frame, bg="#2c3e50")
        btn_frame.pack(pady=10)

        buttons = [
            ("‚ûï T·∫°o ƒë∆°n h√†ng", self.show_taodon_dialog),
            ("üóëÔ∏è X√≥a", self.xoa_donhang),
            ("üîÑ L√†m m·ªõi", self.load_data)
        ]

        for text, cmd in buttons:
            ttk.Button(btn_frame,
                       text=text,
                       command=cmd,
                       style="TButton").pack(side="left", padx=5)

    def show_taodon_dialog(self):
        dialog = tk.Toplevel()
        dialog.title("T·∫°o ƒë∆°n h√†ng m·ªõi")
        dialog.geometry("800x500")

        # Frame ch·ªçn kh√°ch h√†ng
        frame_kh = tk.Frame(dialog)
        frame_kh.pack(fill="x", padx=10, pady=10)
        tk.Label(frame_kh, text="Ch·ªçn kh√°ch h√†ng:", font=("Arial", 12)).pack(side="left", padx=5)
        self.combo_kh = ttk.Combobox(frame_kh, state="readonly", font=("Arial", 12), width=30)
        self.combo_kh.pack(side="left", padx=5)
        self.load_combo_khachhang()

        # Frame ch·ªçn s·∫£n ph·∫©m
        frame_chon_sp = tk.Frame(dialog)
        frame_chon_sp.pack(fill="x", padx=10, pady=10)
        self.combo_sp = ttk.Combobox(frame_chon_sp)
        self.combo_sp.pack(side="left", padx=5)
        self.load_combo_sanpham()
        self.entry_sl = ttk.Entry(frame_chon_sp, width=10)
        self.entry_sl.pack(side="left", padx=5)
        self.entry_sl.insert(0, "1")
        btn_them_sp = ttk.Button(frame_chon_sp, text="Th√™m v√†o ƒë∆°n", command=self.them_sanpham)
        btn_them_sp.pack(side="left", padx=5)

        # B·∫£ng s·∫£n ph·∫©m ƒë√£ ch·ªçn
        self.tree_sp = ttk.Treeview(dialog,
                                    columns=("M√£ SP", "T√™n SP", "S·ªë l∆∞·ª£ng", "ƒê∆°n gi√°", "Th√†nh ti·ªÅn"),
                                    show="headings")
        self.tree_sp.heading("M√£ SP", text="M√£ SP")
        self.tree_sp.heading("T√™n SP", text="T√™n SP")
        self.tree_sp.heading("S·ªë l∆∞·ª£ng", text="S·ªë l∆∞·ª£ng")
        self.tree_sp.heading("ƒê∆°n gi√°", text="ƒê∆°n gi√° (VNƒê)")
        self.tree_sp.heading("Th√†nh ti·ªÅn", text="Th√†nh ti·ªÅn (VNƒê)")
        self.tree_sp.column("M√£ SP", width=80)
        self.tree_sp.column("T√™n SP", width=200)
        self.tree_sp.column("S·ªë l∆∞·ª£ng", width=100)
        self.tree_sp.column("ƒê∆°n gi√°", width=120)
        self.tree_sp.column("Th√†nh ti·ªÅn", width=150)
        self.tree_sp.pack(fill="both", expand=True, padx=10, pady=10)
        self.lbl_tongtien = tk.Label(dialog, text="T·ªïng ti·ªÅn: 0 VNƒê", font=("Arial", 12, "bold"))
        self.lbl_tongtien.pack(pady=10)
        btn_luu = ttk.Button(dialog, text="L∆∞u ƒë∆°n h√†ng", command=lambda: self.luu_donhang(dialog))
        btn_luu.pack(pady=10)

    def load_combo_sanpham(self):
        products = self.product_controller.get_all_products()
        self.combo_sp['values'] = [f"{sp[0]} - {sp[1]}" for sp in products]

    def load_combo_khachhang(self):
        customers = self.khachhang_controller.get_all_khachhang()
        self.combo_kh['values'] = [f"{kh[0]} - {kh[1]}" for kh in customers]

    def them_sanpham(self):
        selected = self.combo_sp.get()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m!")
            return
        ma_sp = selected.split(" - ")[0]
        sanpham = self.product_controller.get_product_by_id(ma_sp)
        if sanpham:
            try:
                so_luong = int(self.entry_sl.get())
            except ValueError:
                messagebox.showwarning("C·∫£nh b√°o", "S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë!")
                return
            thanh_tien = sanpham[2] * so_luong
            self.danh_sach_sanpham.append({
                'ma_sanpham': ma_sp,
                'ten': sanpham[1],
                'gia': sanpham[2],
                'so_luong': so_luong,
                'thanh_tien': thanh_tien
            })
            self.tree_sp.insert("", "end", values=(
                ma_sp,
                sanpham[1],
                so_luong,
                f"{sanpham[2]:,}",
                f"{thanh_tien:,}"
            ))
            self.capnhat_tongtien()

    def capnhat_tongtien(self):
        tong = sum(item['thanh_tien'] for item in self.danh_sach_sanpham)  # S·ª≠ d·ª•ng danh s√°ch ƒë√£ ƒë∆∞·ª£c khai b√°o
        self.lbl_tongtien.config(text=f"T·ªïng ti·ªÅn: {tong:,} VNƒê")

    def luu_donhang(self, dialog):
        if len(self.danh_sach_sanpham) == 0:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng!")
            return
        selected_kh = self.combo_kh.get() if hasattr(self, 'combo_khachhang') else self.combo_kh.get()
        if not selected_kh:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn kh√°ch h√†ng!")
            return
        ma_khachhang = selected_kh.split(" - ")[0]
        if self.donhang_controller.tao_donhang(ma_khachhang, self.danh_sach_sanpham):
            messagebox.showinfo("Th√†nh c√¥ng", "L∆∞u ƒë∆°n h√†ng th√†nh c√¥ng!")
            self.load_data()
            dialog.destroy()
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l∆∞u ƒë∆°n h√†ng!")

    def load_data(self, search_term=None):
        for item in self.tree.get_children():
            self.tree.delete(item)
        if search_term:
            donhangs = self.donhang_controller.search_donhang(search_term)
        else:
            donhangs = self.donhang_controller.get_all_donhang()
        # Gi·∫£ s·ª≠ m·ªói ƒë∆°n h√†ng tr·∫£ v·ªÅ l√†: (ma_dh, ma_kh, ten_kh, ngay_dat, tong_tien)
        for dh in donhangs:
            ma_dh, ma_kh, ten_kh, ngay_dat, tong_tien = dh
            self.tree.insert("", "end", values=(
                ma_dh,
                ma_kh,
                ten_kh,
                ngay_dat.strftime("%d/%m/%Y"),
                f"{tong_tien:,.0f} VNƒê"
            ))

    def search_donhang(self):
        search_term = self.search_var.get()
        self.load_data(search_term)

    def clear_search(self):
        self.search_var.set("")
        self.load_data()

    def xoa_donhang(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ƒë∆°n h√†ng c·∫ßn x√≥a!")
            return
        ma_donhang = self.tree.item(selected)['values'][0]
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng #{ma_donhang}?"):
            if self.donhang_controller.xoa_donhang(ma_donhang):
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!")
                self.load_data()
            else:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng!")


